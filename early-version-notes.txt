This script will examine EXIF data of JPG files in the current directory,
create a folder for each unique Image DateTime, and move the image to that folder.

For now it's janky: Copy your pictures to ./source and run the script. Processed
files will be placed in subfolders of ./done by date+camera make+camera model.

Do be careful
*   Work with copies! 
*   Images without EXIF cannot be parsed with this. They will simply
remain behind in the root folder.
*   non-JPG files will be ignored as well, and remain behind in the root folder

Change Log:

2022 01 29 AH - New
2022 08 13 AH - New features:
    *   Now uses ./source folder for source files, ./done for processed files
    *   Now parses all files and files in subfolders of ./source
    *   Now reads camera make and model from EXIF data and builds a target folder name with that information
        *   NOTE this is irrespective of which subfolder the source file was found in
    *   Better comunication of files that were not processed
    *   Removes source folders that are empty after reorganizing their contents
2023 09 28 AH v3.1 - in which we move the data storage to a different drive
2024 01 14 AH v3.3 - New features:
    *   now accepts optional root folder to parse as a sys.argv via Windows SendTo
        *   invoke it from Windows Explorer as a folder action!
    *   clearer progress feedback
    *   now puts files with EXIF read errors in a Default Location instead of skipping them
2024 02 10 AH
    *   Source now managed in Git repo
    *   Added JSONDb automated file tracking, fulfilling this feature request:
        *   Automatically read requested storage device and figure out what needs to be offloaded to 
            source_root. Journal the devices & files copied so you know where to ontinue on next run.
            Bonus round: log each file type the camera is capable of separately, e.g., JPG and 
            whatever video formats it supports.


Bugs & Feature Reqs:

    *   Designate a folder in source_root that will be ignored. So that you can dump processed files 
            here before offloading them to permanent storage.
    *   Not great: If you're using multiple cards for a camera, you might get recent files from card
            one that are later than a card two you never got files from. Then the db will point to the 
            latest file seen, which is on ard one, and never choose to download from the second card.
            I think the solution is the 'camera-id' file also needs to have an ident for the card itself,
            and we need to storee that additional key information.

These notes were offloaded to a separate file 20220301